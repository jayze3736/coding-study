1. 객체 지향과 절차 지향적 프로그래밍
C의 경우 절차 지향적 프로그래밍 방법으로, 프로그램의 흐름을 중요시 했다. 그러나 게임과 같은 객체와 객체간의 상호작용이 넘치는 프로그램의 경우 이를 절차들로 표현하기에
무리가 있었고 이러한 문제를 해결하기 위해 객체 지향이 도입되었다.
객체 지향은 대체로 캡슐화, 오버로딩, 상속 등이 존재한다. 클래스를 이용하여 데이터를 보호하고 상속을 이용하여 프로그램의 재생산성을 높이는 등 효율적으로 프로그램을 개발할 수 있게
되었다. 이러한 객체 지향을 지원하기 위해 등장한 언어중 하나인 C++을 배운다.
여담이지만 java는 

2. 프로그램의 개발 절차
1) 코드 작성
2) 컴파일
3) 링크

컴파일은 우리가 아는 C++언어를 어셈블리어로 변환하여 목적 파일(오브젝트 파일)을 생성하는 작업을 의미하며 링크는 이 오브젝트 파일에서 필요한 라이브러리 파일을 매치시키는 등의 작업을 통해
실행 파일을 완성한다.

3. 파일 입출력
기본적으로 입출력에 관한 함수, 객체를 사용하려면 <iostream>이라는 라이브러리가 필요하다.
출력의 경우 cout << "string", 입력의 경우 cin >> width 등의 형태로 입출력 객체를 사용하여 모니터에 출력 또는 입력장치로부터 입력받아 데이터를 전송한다.
특이한 점은 스트림 버퍼가 존재한다. 
스트림 버퍼란, 데이터가 임시적으로 존재할 수 있는 공간을 의미하는데, cin 으로 입력을 받을때 키보드로 문자를 타이핑했을때 그 문자가
바로 전송되는 것이 아니라 enter키가 입력될때까지 입력받은 데이터를 버퍼에 임시적으로 존재하게하고 enter키가 입력되면 버퍼에 있는 데이터가 전송된다.
(backspace는 제어키라고도 하나보다.)
cout같은 경우도 마찬가지로 문자열이 버퍼에 들어오고 그 버퍼에서 문자 하나하나씩 꺼내서 데이터를 화면에 출력한다.

4. 이름 공간
namespace라고도 하며 cin과 cout도 원래는 std::가 앞에 붙어야 사용될 수 있지만, 컴파일러에게 using namespace std;라고 선언하여 std라는 이름 공간을 이 코드에서 사용하겠다고 하면 std::를
생략할 수 있다.
namespace (이름) {
 type1 func1(){};
 type2 val1;
}
과 같이 이름 공간을 사용하며 (이름):: 을 붙여 선언된 함수와 변수를 사용한다.
이름 공간의 장점은 여러 사람들이 협엽하여 프로그래밍을 할때 다른 사람의 코드와 자신의 코드와 같이 사용하면 이름이 충돌되어 프로그램 에러가 발생할 수 있다. 이러한 문제를 방지하기 위해
프로그램 설계시 이름 공간을 사용하면 이름 충돌 문제를 피할 수 있다.
