# NULL값을 비교할때 주의해야할 사항, 특이점에 대해 정리한다.

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
SQL 1)
INSERT INTO Student VALUES (432, "Kevin", NULL, 1500);
INSERT INTO Student VALUES (321, "Lori", NULL, 2500);

결과)
NO ERROR

Student
Sid	sName	GPA	HS
123	Amy	3.9	1000  1
456	Doris	3.9	1000  2
654	Amy	3.9	1000  3
876	Irene	3.9	400   4
678	Fay	3.8	200   5
987	Helen	3.7	800   6
234	Bob	3.6	1500    7
345	Craig	3.5	500   8
543	Craig	3.4	2000  9
789	Gary	3.4	800   10
567	Edward	2.9	2000   11
765	Jay	2.9	1500   12
321	Lori	-	2500   13
432	Kevin	-	1500   14

포인트)
1. Student 테이블에 GPA 필드에 NULL값을 가진 레코드 둘을 추가했다.


----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
SQL 2)
SELECT Sid, sName, GPA
FROM Student
WHERE GPA > 3.5 or GPA <= 3.5

결과)
Sid	sName	GPA
123	Amy	3.9
234	Bob	3.6
345	Craig	3.5
456	Doris	3.9
543	Craig	3.4
567	Edward	2.9
654	Amy	3.9
678	Fay	3.8
765	Jay	2.9
789	Gary	3.4
876	Irene	3.9
987	Helen	3.7

포인트)
1. GPA가 3.5보다 크거나 작거나 같은 경우는 모든 경우이다. 즉, 자명하다고 생각할 수 있다. 따라서 모든 학생이 출력되야할 것 같지만,
GPA가 NULL값인 경우에는 GPA값을 부등식으로 비교할 수 없으므로 새로 추가한 학생들이 결과 테이블에 출력되지않았다.

2. WHERE이 판단하는 논리값은 참(true), 거짓(false), undefined 세가지이다. 
값이 NULL일때는 판단하는 결과가 true, false가 아니라 undefined(=null)인지 아닌지이므로 
해당 부등식으로 NULL값을 조건 대상으로 판단하지않는다.



----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
SQL 3)
SELECT Sid, sName, GPA
FROM Student
WHERE GPA > 3.5 or GPA <= 3.5 or GPA is NULL


결과)
Sid	sName	GPA
123	Amy	3.9
234	Bob	3.6
321	Lori	-
345	Craig	3.5
432	Kevin	-
456	Doris	3.9
543	Craig	3.4
567	Edward	2.9
654	Amy	3.9
678	Fay	3.8
765	Jay	2.9
789	Gary	3.4
876	Irene	3.9
987	Helen	3.7

포인트)
1. WHERE 조건 뒤에 or GPA is null을 붙였더니 Student 테이블의 모든 레코드가 출력되었다. 
따라서 NULL 인지 아닌지를 판단하려면 "is null" 또는 "is not null" 절을 작성해야 하며 "= null"로는 불가능하다.

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
SQL 4)
SELECT count(*)
FROM Student
WHERE GPA is not NULL

결과)
count(*)
12

포인트)
말 그대로 GPA값이 NULL이 아닌 레코드의 수를 파악하는 쿼리이다. 총 12명의 학생이 GPA 데이터를 가지고 있다.

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
SQL 5)
SELECT count(*)
FROM Student
WHERE GPA is NULL

결과)
count(*)
2

포인트)
이번엔 GPA가 NULL인 레코드의 수를 파악하는 쿼리이다. 아까 추가한 2개의 학생 레코드가 세어진 것을 볼 수 있다.


----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
SQL 6)
SELECT DISTINCT GPA
FROM Student

결과)
GPA
3.9
3.6
NULL
3.5
3.4
2.9
3.8
3.7

포인트)
테이블에서 GPA에 존재하는 값들을 출력하라고 쿼리를 명령할때 NULL값도 GPA값으로 분류하여 총 8개의 GPA값이 출력된다.

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
SQL 7)
SELECT count(DISTINCT GPA)
FROM Student

결과)
count(DISTINCT GPA)
7

포인트)
위 쿼리에서 분명히 구별되는 GPA값은 NULL값을 포함하여 총 8개의 값이 나타났는데, Count 함수로 개수를 셀때는 7개가 출력된다.

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

정리!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!)

1. NULL값은 조건의 결과가 undefined일때 출력된다.
2. NULL은 < , > , =가 아닌 is null 또는 is not null 절로 사용된다.
3. NULL값도 일종의 value로 취급되지만 aggregation 함수(count, avg, max, min)의 대상에서 제외된다.








