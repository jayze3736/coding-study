# insert ,create , delete , update 데이터를 생성하고 제거하고 수정하는 키워드 사용법을 정리한다.

# insert를 사용하는데 두 가지 형태가 존재한다.

1. insert INTO (TABLE) VALUES(...)
  TABLE에 하나의 튜플값을 삽입할때 사용한다.
  
2. insert INTO (TABLE) (SUB-QUERY)
  Sub-query에서 반환되는 테이블이 그대로 대상 테이블로 들어가도록 할 수 있다.
  
  
# create

CREATE TABLE "테이블 명" (type atb1, type atb2, type atb3...) 형태로 테이블을 생성한다

# delete

delete from (테이블 명)
where (condition) or (sub-query)

테이블 명에 해당하는 테이블의 레코드를 삭제한다. condition을 만족하는 튜플을 찾아 삭제하거나 sub-query에서 반환하는 레코드와 일치하는 경우를 찾아 삭제한다.
테이블에서 condition을 만족하는 경우가 없거나 sub-query의 일부 튜플이 해당 테이블에 존재하지않아도 정상적으로 실행되며 조건과 일치하는 튜플만 테이블에서 삭제한다.

# update

update (테이블 명)
set atb = (val to change)
where (condition)

테이블에서 where 조건이 참인 튜플의 atb 필드의 값을 val to change로 바꾼다. 이때 where절이 없으면 모든 튜플에 대해서 값을 바꾼다.


---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
SQL 1)
SELECT Sid, "Carnegie Mellon", "CS", NULL
FROM Student
WHERE Sid not in(SELECT Sid FROM Apply)

------->

INSERT INTO Apply
SELECT Sid, "Carnegie Mellon", "CS", NULL
FROM Student
WHERE Sid not in(SELECT Sid FROM Apply)

결과)
Sid	"Carnegie Mellon"	"CS"	NULL
432	Carnegie Mellon	CS	
456	Carnegie Mellon	CS	
567	Carnegie Mellon	CS	
654	Carnegie Mellon	CS	
789	Carnegie Mellon	CS	

------->

Sid	cName	major	dec
123	Stanford	CS	Y
123	Stanford	EE	N
123	Berkeley	CS	Y
123	Cornell	EE	Y
234	Berkeley	biology	N
345	MIT	bioengineering	Y
345	Cornell	bioengineering	N
345	Cornell	CS	Y
345	Cornell	EE	N
678	Stanford	history	Y
987	Stanford	CS	Y
987	Berkeley	CS	Y
876	Stanford	CS	N
876	MIT	biology	Y
876	MIT	marine biology	N
765	Stanford	history	Y
765	Cornell	history	N
765	Cornell	psychology	Y
543	MIT	CS	N
321	MIT	history	N
321	MIT	psychology	Y
432	Carnegie Mellon	CS	-
456	Carnegie Mellon	CS	-
567	Carnegie Mellon	CS	-
654	Carnegie Mellon	CS	-
789	Carnegie Mellon	CS	-

포인트)
지원하지않은 학생들의 sid를 찾고 cName = "Carnegie Mellon", major = "CS", dec = NULL 값인 튜플을 시험삼아 출력해 본 결과가 나타났다.

-------->

INSERT INTO Apply 를 앞에 추가하니 뒤 문장은 sub-query가 되었고 이로 인해 해당 튜플이 Apply에 추가되었다.
이렇게 처음에 subquery만 따로 실행하여 어떤 튜플이 결과로 나오는지 체크하고 수정하면 된다.


---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
SQL 2)
SELECT Sid, count(distinct major)
FROM Apply
GROUP by Sid
having count(distinct major) > 2;

-------->

DELETE FROM Student
WHERE Sid in(
SELECT Sid
FROM Apply
GROUP by Sid
having count(distinct major) > 2);


결과)
Sid	count(distinct major)
345	3
876	3

-------->

Sid	sName	GPA	HS
123	Amy	3.9	1000
456	Doris	3.9	1000
654	Amy	3.9	1000
678	Fay	3.8	200
987	Helen	3.7	800
234	Bob	3.6	1500
543	Craig	3.4	2000
789	Gary	3.4	800
567	Edward	2.9	2000
765	Jay	2.9	1500
321	Lori		2500
432	Kevin		1500


포인트)
첫번째로 구별되는 신청 전공의 수가 2개보다 많은 학생의 ID를 찾는 쿼리를 수행했다.

-------->

subquery로 반환되는 결과인 ID 345, 876 임을 이용하여 where Sid in (subquery) 형태로 Delete 문과 함께 해당 ID의 튜플을 Student에서 삭제했다.

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
SQL 3)
DELETE FROM Apply
WHERE Sid in(
SELECT Sid
FROM Apply
GROUP by Sid
having count(distinct major) > 2);

결과)
NO error

포인트)
delete를 사용할때 해당 테이블과 subquery의 테이블의 이름이 같으면 에러가 발생하는 DB 프로그램도 존재하니 이에 대해 유의하자. 확인해본바 sqlite는 그렇지 않다.

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
SQL 4)
SELECT * FROM Apply
WHERE cName = "Carnegie Mellon"
	AND Sid in (SELECT Sid FROM Student WHERE GPA < 3.6);
  
  
-------->

UPDATE Apply
SET dec = "Y"
WHERE cName = "Carnegie Mellon"
	AND Sid in (SELECT Sid FROM Student WHERE GPA < 3.6);


결과)
Sid	cName	major	dec
567	Carnegie Mellon	CS	
789	Carnegie Mellon	CS	


-------->


Apply
Sid	cName	major	dec
123	Stanford	CS	Y
123	Stanford	EE	N
123	Berkeley	CS	Y
123	Cornell	EE	Y
234	Berkeley	biology	N
678	Stanford	history	Y
987	Stanford	CS	Y
987	Berkeley	CS	Y
765	Stanford	history	Y
765	Cornell	history	N
765	Cornell	psychology	Y
543	MIT	CS	N
456	Carnegie Mellon	CS	
567	Carnegie Mellon	CS	Y
654	Carnegie Mellon	CS	
789	Carnegie Mellon	CS	Y
123	Carnegie Mellon	EE	Y




포인트)
GPA가 3.6미만이고 대학명이 Carnegie Mellon인 Apply의 튜플을 반환한 결과 두명의 학생이 해당하는 것으로 확인되었다. 현재 dec값이 NULL이므로 Update를 이용하여 바꿔주려고 한다.

-------->

UPDATE Apply
SET dec = "Y"
WHERE (condition);

Apply에서 condition을 만족하는 튜플의 dec값을 "Y"로 바꿨다.


---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
SQL 5)
UPDATE Apply
SET dec = "Y";

결과)
Sid	cName	major	dec
123	Stanford	CS	Y
123	Stanford	EE	Y
123	Berkeley	CS	Y
123	Cornell	EE	Y
234	Berkeley	biology	Y
678	Stanford	history	Y
987	Stanford	CS	Y
987	Berkeley	CS	Y
765	Stanford	history	Y
765	Cornell	history	Y
765	Cornell	psychology	Y
543	MIT	CS	Y
456	Carnegie Mellon	CS	Y
567	Carnegie Mellon	CS	Y
654	Carnegie Mellon	CS	Y
789	Carnegie Mellon	CS	Y
123	Carnegie Mellon	EE	Y

포인트)
where없이 Update를 하면 모든 테이블의 dec값을 "Y"로 업데이트한다.



